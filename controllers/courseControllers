const pool = require('../config/database');
 
 //adding new course
const addCourse = async (req, res) => {
    const { course_code, course_name } = req.body;

    try {
        // Insert new user into the database
        const [rows] = await pool.query('INSERT INTO course (course_code, course_name) VALUES (?, ?)', [course_code, course_name,]);

        res.status(201).json({ message: 'Course Code and Name successfully added!' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};
 
  //log in the course
const LogInCourse = async (req, res) => {
    const { course_code, course_name } = req.body;

    try {
        const [coursecode] = await pool.query('SELECT * FROM course WHERE course_code = ?', [course_code]);

        if (coursecode.length === 0) {
            return res.status(400).json({ error: 'Invalid course code' });
        }
        
        const[coursename] = await pool.query('SELECT * FROM course WHERE course_name = ?', [course_name]);
        if (coursename.length === 0){
            return res.status(400).json({error: 'Invalid course name'});
        }
    
        res.status(200).json({message: 'Log In Succesfully'});
    }
     catch (err) {
        res.status(500).json({ error: err.message });
    }
};

//To show all existing Courses
const showCourse = async (req, res) => {
    try {
      const [course] = await pool.query('SELECT course_id, course_code, course_name, created_at, updated_at FROM course');
      res.json(course);
  
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  };
 
    //update course function
  const updateCourse = async (req, res) => {
    const { course_id } = req.params;
    const { course_code, course_name } = req.body;
  
    if (!course_id || isNaN(Number(course_id))) {
        return res.status(400).json({ error: 'Invalid or missing ID' });
    }
  
    try {
        const [result] = await pool.query(
            'UPDATE course SET course_code = ?, course_name = ? WHERE course_id = ?',
            [course_code, course_name, course_id]
        );
  
        if (result.affectedRows === 0) {
            return res.status(404).json({ error: 'Course not found for update' });
        }
  
        res.json({ message: 'Course updated successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
  };
  

// Delete course function
const deleteCourse = async (req, res) => {
  const { course_id } = req.params;

  if (!course_id || isNaN(Number(course_id))) {
      return res.status(400).json({ error: 'Invalid or missing ID' });
  }

  try {
      const [result] = await pool.query('DELETE FROM course WHERE course_id = ?', [course_id]);

      if (result.affectedRows === 0) {
          return res.status(404).json({ error: 'Course not found for deletion' });
      }

      res.json({ message: 'Course deleted successfully' });
  } catch (err) {
      res.status(500).json({ error: err.message });
  }
};

module.exports = { addCourse, LogInCourse, showCourse, updateCourse, deleteCourse };
